// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Error defines model for Error.
type Error struct {
	Detail   string  `json:"detail"`
	Instance *string `json:"instance,omitempty"`
	Status   int     `json:"status"`
	Title    string  `json:"title"`
	Type     *string `json:"type,omitempty"`
}

// Groups defines model for Groups.
type Groups = string

// HostNode defines model for HostNode.
type HostNode struct {
	// CipherSuite Cipher suite is the TLS cipher suite used when establishing a
	// connection to the control plane.
	CipherSuite string `json:"cipher_suite"`

	// Group Group is the name of the group to which the node instance belongs
	// to.
	Group *string `json:"group"`

	// Hostname Hostname is the RFC 1123 hostname of the node.
	Hostname string `json:"hostname"`

	// Id The node ID
	Id openapi_types.UUID `json:"id"`

	// TlsVersion TLS version is the TLS version used when establishing a connection
	// to the control plane.
	TlsVersion string `json:"tls_version"`

	// Version Version is the Kong Gateway semantic version of the node. This
	// version can be represented as 3 or 4 integers separated by dots.
	Version string `json:"version"`
}

// HostsGroups defines model for HostsGroups.
type HostsGroups struct {
	Groups   *[]string `json:"groups,omitempty"`
	Hostname *string   `json:"hostname,omitempty"`
}

// Node defines model for Node.
type Node struct {
	// CipherSuite Cipher suite is the TLS cipher suite used when establishing a
	// connection to the control plane.
	CipherSuite string `json:"cipher_suite"`

	// Group Group is the name of the group to which the node instance belongs
	// to.
	Group *string `json:"group"`

	// Hostname Hostname is the RFC 1123 hostname of the node.
	Hostname string `json:"hostname"`

	// Id The node ID
	Id openapi_types.UUID `json:"id"`

	// Payload The entire payload sent from the control plane.
	Payload map[string]interface{} `json:"payload"`

	// TlsVersion TLS version is the TLS version used when establishing a connection
	// to the control plane.
	TlsVersion string `json:"tls_version"`

	// Version Version is the Kong Gateway semantic version of the node. This
	// version can be represented as 3 or 4 integers separated by dots.
	Version string `json:"version"`
}

// ResourceNotFound defines model for ResourceNotFound.
type ResourceNotFound struct {
	Message *string `json:"message,omitempty"`
}

// Resources defines model for Resources.
type Resources struct {
	Data *[]map[string]interface{} `json:"data,omitempty"`

	// Next The next page of results.
	Next *string `json:"next"`
}

// GroupParameter defines model for GroupParameter.
type GroupParameter = string

// HostParameter The RFC 1123 IP address or hostname of the control plane connected to
// the service mesh. Must be between 1 and 253 characters long, and each
// segment separated by dots can contain alphanumeric characters and
// hyphens, but cannot start or end with a hyphen.
type HostParameter = string

// NodeIdParameter defines model for NodeIdParameter.
type NodeIdParameter = openapi_types.UUID

// ResourcesParameter defines model for ResourcesParameter.
type ResourcesParameter = string

// BadRequestResponse defines model for BadRequestResponse.
type BadRequestResponse = Error

// GroupNodesResponse defines model for GroupNodesResponse.
type GroupNodesResponse = []HostNode

// GroupsResponse defines model for GroupsResponse.
type GroupsResponse = interface{}

// HostNodesResponse defines model for HostNodesResponse.
type HostNodesResponse = []HostNode

// HostsResponse defines model for HostsResponse.
type HostsResponse = HostsGroups

// NodeResponse defines model for NodeResponse.
type NodeResponse = Node

// ResourceNotFoundResponse defines model for ResourceNotFoundResponse.
type ResourceNotFoundResponse = ResourceNotFound

// ResourcesResponse defines model for ResourcesResponse.
type ResourcesResponse = Resources
