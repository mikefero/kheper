// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all groups
	// (GET /v1/groups)
	GetV1Groups(w http.ResponseWriter, r *http.Request)
	// List all nodes connected to a group
	// (GET /v1/groups/{group})
	GetV1GroupsGroup(w http.ResponseWriter, r *http.Request, group GroupParameter)
	// List all hosts
	// (GET /v1/hosts)
	GetV1Hosts(w http.ResponseWriter, r *http.Request)
	// List all nodes connected to a host
	// (GET /v1/hosts/{host})
	GetV1HostsHost(w http.ResponseWriter, r *http.Request, host HostParameter)
	// Retrieve a node
	// (GET /v1/hosts/{host}/{node-id})
	GetV1HostsHostNodeId(w http.ResponseWriter, r *http.Request, host HostParameter, nodeId NodeIdParameter)
	// Retrieve a specific resource from a node payload
	// (GET /v1/hosts/{host}/{node-id}/{resource})
	GetV1HostsHostNodeIdResource(w http.ResponseWriter, r *http.Request, host HostParameter, nodeId NodeIdParameter, resource ResourcesParameter)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// List all groups
// (GET /v1/groups)
func (_ Unimplemented) GetV1Groups(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List all nodes connected to a group
// (GET /v1/groups/{group})
func (_ Unimplemented) GetV1GroupsGroup(w http.ResponseWriter, r *http.Request, group GroupParameter) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List all hosts
// (GET /v1/hosts)
func (_ Unimplemented) GetV1Hosts(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List all nodes connected to a host
// (GET /v1/hosts/{host})
func (_ Unimplemented) GetV1HostsHost(w http.ResponseWriter, r *http.Request, host HostParameter) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Retrieve a node
// (GET /v1/hosts/{host}/{node-id})
func (_ Unimplemented) GetV1HostsHostNodeId(w http.ResponseWriter, r *http.Request, host HostParameter, nodeId NodeIdParameter) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Retrieve a specific resource from a node payload
// (GET /v1/hosts/{host}/{node-id}/{resource})
func (_ Unimplemented) GetV1HostsHostNodeIdResource(w http.ResponseWriter, r *http.Request, host HostParameter, nodeId NodeIdParameter, resource ResourcesParameter) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetV1Groups operation middleware
func (siw *ServerInterfaceWrapper) GetV1Groups(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV1Groups(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetV1GroupsGroup operation middleware
func (siw *ServerInterfaceWrapper) GetV1GroupsGroup(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "group" -------------
	var group GroupParameter

	err = runtime.BindStyledParameterWithOptions("simple", "group", chi.URLParam(r, "group"), &group, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "group", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV1GroupsGroup(w, r, group)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetV1Hosts operation middleware
func (siw *ServerInterfaceWrapper) GetV1Hosts(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV1Hosts(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetV1HostsHost operation middleware
func (siw *ServerInterfaceWrapper) GetV1HostsHost(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "host" -------------
	var host HostParameter

	err = runtime.BindStyledParameterWithOptions("simple", "host", chi.URLParam(r, "host"), &host, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "host", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV1HostsHost(w, r, host)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetV1HostsHostNodeId operation middleware
func (siw *ServerInterfaceWrapper) GetV1HostsHostNodeId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "host" -------------
	var host HostParameter

	err = runtime.BindStyledParameterWithOptions("simple", "host", chi.URLParam(r, "host"), &host, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "host", Err: err})
		return
	}

	// ------------- Path parameter "node-id" -------------
	var nodeId NodeIdParameter

	err = runtime.BindStyledParameterWithOptions("simple", "node-id", chi.URLParam(r, "node-id"), &nodeId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "node-id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV1HostsHostNodeId(w, r, host, nodeId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetV1HostsHostNodeIdResource operation middleware
func (siw *ServerInterfaceWrapper) GetV1HostsHostNodeIdResource(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "host" -------------
	var host HostParameter

	err = runtime.BindStyledParameterWithOptions("simple", "host", chi.URLParam(r, "host"), &host, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "host", Err: err})
		return
	}

	// ------------- Path parameter "node-id" -------------
	var nodeId NodeIdParameter

	err = runtime.BindStyledParameterWithOptions("simple", "node-id", chi.URLParam(r, "node-id"), &nodeId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "node-id", Err: err})
		return
	}

	// ------------- Path parameter "resource" -------------
	var resource ResourcesParameter

	err = runtime.BindStyledParameterWithOptions("simple", "resource", chi.URLParam(r, "resource"), &resource, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "resource", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV1HostsHostNodeIdResource(w, r, host, nodeId, resource)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/groups", wrapper.GetV1Groups)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/groups/{group}", wrapper.GetV1GroupsGroup)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/hosts", wrapper.GetV1Hosts)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/hosts/{host}", wrapper.GetV1HostsHost)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/hosts/{host}/{node-id}", wrapper.GetV1HostsHostNodeId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/hosts/{host}/{node-id}/{resource}", wrapper.GetV1HostsHostNodeIdResource)
	})

	return r
}
