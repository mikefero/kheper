// Code generated by magic pixies DO NOT EDIT.

// Generated from OpenRPC service 'Kong Configuration Sync'
package kong_sync

import (
	"context"
	"encoding/json"
	"fmt"
	runtime "github.com/Kong/go-openrpc/runtime"
)

type Wrapper[U any] struct {
	Handler HandlerInterface[U]
}

// GetID returns the service identification string.
func (Wrapper[U]) GetID() string {
	return "kong.sync.v2"
}

// SetUserData sets the value passed to the handler methods.
func (Wrapper[U]) SetUserData(conn *runtime.Conn, userData U) {
	conn.SetUserData(userData)
}

// GetMethods returns a dictionary with all the methods of the service,
// with a wrapper to handle (de)coding.
func (wh *Wrapper[U]) GetMethods() map[string]runtime.Method {
	return map[string]runtime.Method{
		"kong.sync.v2.get_delta":          runtime.WrapMethod(wh.Handler.GetDelta, getGetDeltaResponse),
		"kong.sync.v2.notify_new_version": runtime.WrapMethod(wh.Handler.NotifyNewVersion, getNotifyNewVersionResponse),
	}
}

// Performs remote call to method 'notify_new_version'.
// DP method.
// The Control Plane calls this method to notify a Data Plane node that a new version is available.
func CallNotifyNewVersion(ctx context.Context, conn runtime.Caller, params *NotifyNewVersionParams) (NotifyNewVersionResponse, error) {
	resp, err := conn.CallMethod(ctx, "kong.sync.v2.notify_new_version", params)
	if err != nil {
		return nil, err
	}
	return runtime.NarrowResponse[NotifyNewVersionResponse](resp)
}

// Performs remote call to method 'get_delta'.
// CP method.
// Data Plane nodes call this method to pull the latest changes from the Control Plane.
func CallGetDelta(ctx context.Context, conn runtime.Caller, params *GetDeltaParams) (GetDeltaResponse, error) {
	resp, err := conn.CallMethod(ctx, "kong.sync.v2.get_delta", params)
	if err != nil {
		return nil, err
	}
	return runtime.NarrowResponse[GetDeltaResponse](resp)
}

// HandlerInterface should be implemented by the service implementation.
type HandlerInterface[U any] interface {
	NotifyNewVersion(ctx context.Context, userData U, param *NotifyNewVersionParams) (NotifyNewVersionResponse, error)
	GetDelta(ctx context.Context, userData U, param *GetDeltaParams) (GetDeltaResponse, error)
}

// NotifyNewVersionParams is the type for the parameters of the method "notify_new_version".
type NotifyNewVersionParams struct {
	NodeId  string `json:"node_id"`
	Version string `json:"version"`
}

// FillDefaults returns a new parameters object with any default values.
func (*NotifyNewVersionParams) FillDefaults() runtime.Params {
	return &NotifyNewVersionParams{}
}

// AsRefArray returns an array of interface references to each field.
func (p *NotifyNewVersionParams) AsRefArray() ([]any, error) {
	return []any{
		&p.NodeId,
		&p.Version,
	}, nil
}

// NotifyNewVersionResponse is the interface returned by the method "notify_new_version".
type NotifyNewVersionResponse interface {
	runtime.Response
	isNotifyNewVersionResponse()
}

// getNotifyNewVersionResponse returns an empty response of the type corresponding to the given code.
// Used by runtime code.
func getNotifyNewVersionResponse(code int) (runtime.Response, error) {
	switch code {
	case 0:
		return new(NotifyNewVersionResult), nil
	case 471:
		return new(NotifyNewVersionWrongNodeIdError), nil
	default:
		return nil, fmt.Errorf("invalid error code %d", code)
	}
}

// FoldNotifyNewVersionResultError returns a successful result or error
func FoldNotifyNewVersionResultError(resp NotifyNewVersionResponse, err error) (*NotifyNewVersionResult, error) {
	if err != nil {
		return nil, err
	}
	result, ok := resp.(*NotifyNewVersionResult)
	if !ok {
		return nil, resp.Error()
	}
	return result, nil
}

// NotifyNewVersionResult is the successful result value of method notify_new_version.
// nothing useful, currently returns `True` if successful.
type NotifyNewVersionResult bool

func (NotifyNewVersionResult) isNotifyNewVersionResponse() {}

func (NotifyNewVersionResult) Error() error {
	return nil
}

func (r NotifyNewVersionResult) Send(ctx context.Context, w *runtime.Conn, id int) error {
	return w.SendResult(ctx, id, r)
}

// Error code 471: wrong node_id
type NotifyNewVersionWrongNodeIdError struct{}

func (NotifyNewVersionWrongNodeIdError) isNotifyNewVersionResponse() {}

func (r NotifyNewVersionWrongNodeIdError) Error() error {
	return runtime.ErrorData{
		Code:    471,
		Data:    r,
		Message: "wrong node_id",
	}
}

func (r NotifyNewVersionWrongNodeIdError) Send(ctx context.Context, w *runtime.Conn, id int) error {
	return w.SendError(ctx, id, r.Error())
}

// GetDeltaParams is the type for the parameters of the method "get_delta".
type GetDeltaParams struct {
	NodeId  string `json:"node_id"`
	Version string `json:"version"`
}

// FillDefaults returns a new parameters object with any default values.
func (*GetDeltaParams) FillDefaults() runtime.Params {
	return &GetDeltaParams{}
}

// AsRefArray returns an array of interface references to each field.
func (p *GetDeltaParams) AsRefArray() ([]any, error) {
	return []any{
		&p.NodeId,
		&p.Version,
	}, nil
}

// GetDeltaResponse is the interface returned by the method "get_delta".
type GetDeltaResponse interface {
	runtime.Response
	isGetDeltaResponse()
}

// getGetDeltaResponse returns an empty response of the type corresponding to the given code.
// Used by runtime code.
func getGetDeltaResponse(code int) (runtime.Response, error) {
	switch code {
	case 0:
		return new(GetDeltaResult), nil
	case 471:
		return new(GetDeltaWrongNodeIdError), nil
	default:
		return nil, fmt.Errorf("invalid error code %d", code)
	}
}

// FoldGetDeltaResultError returns a successful result or error
func FoldGetDeltaResultError(resp GetDeltaResponse, err error) (*GetDeltaResult, error) {
	if err != nil {
		return nil, err
	}
	result, ok := resp.(*GetDeltaResult)
	if !ok {
		return nil, resp.Error()
	}
	return result, nil
}

// GetDeltaResult is the successful result value of method get_delta.
// list of changes since requested version
// array of Delta objects
type GetDeltaResult []Delta

func (GetDeltaResult) isGetDeltaResponse() {}

func (GetDeltaResult) Error() error {
	return nil
}

func (r GetDeltaResult) Send(ctx context.Context, w *runtime.Conn, id int) error {
	return w.SendResult(ctx, id, r)
}

// Error code 471: wrong node_id
type GetDeltaWrongNodeIdError struct{}

func (GetDeltaWrongNodeIdError) isGetDeltaResponse() {}

func (r GetDeltaWrongNodeIdError) Error() error {
	return runtime.ErrorData{
		Code:    471,
		Data:    r,
		Message: "wrong node_id",
	}
}

func (r GetDeltaWrongNodeIdError) Send(ctx context.Context, w *runtime.Conn, id int) error {
	return w.SendError(ctx, id, r.Error())
}

// Extra type definitions.

// Delta is defined in '#/components/schemas/delta'.
// A Delta object represents a single change to the configuration
type Delta struct {
	Id      string                     `json:"id"`
	Row     map[string]json.RawMessage `json:"row,omitempty"`
	Type    string                     `json:"type"`
	Version int64                      `json:"version"`
	WsId    string                     `json:"ws_id"`
}
