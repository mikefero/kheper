// Code generated by magic pixies DO NOT EDIT.

// Generated from OpenRPC service 'Data plane debug capabilities'
// A service to manage data plane debugging tools.
package kong_debug

import (
	"context"
	"fmt"
	runtime "github.com/Kong/go-openrpc/runtime"
)

type Wrapper[U any] struct {
	Handler HandlerInterface[U]
}

// GetID returns the service identification string.
func (Wrapper[U]) GetID() string {
	return "kong.debug.v1"
}

// SetUserData sets the value passed to the handler methods.
func (Wrapper[U]) SetUserData(conn *runtime.Conn, userData U) {
	conn.SetUserData(userData)
}

// GetMethods returns a dictionary with all the methods of the service,
// with a wrapper to handle (de)coding.
func (wh *Wrapper[U]) GetMethods() map[string]runtime.Method {
	return map[string]runtime.Method{
		"kong.debug.v1.get_log_level": runtime.WrapNullMethod(wh.Handler.GetLogLevel, getGetLogLevelResponse),
		"kong.debug.v1.set_log_level": runtime.WrapMethod(wh.Handler.SetLogLevel, getSetLogLevelResponse),
	}
}

// Performs remote call to method 'get_log_level'.
// Reports the current log level of the control plane.
func CallGetLogLevel(ctx context.Context, conn runtime.Caller) (GetLogLevelResponse, error) {
	resp, err := conn.CallMethod(ctx, "kong.debug.v1.get_log_level", nil)
	if err != nil {
		return nil, err
	}
	return runtime.NarrowResponse[GetLogLevelResponse](resp)
}

// Performs remote call to method 'set_log_level'.
// Temporarily sets a new log level.
// Reverts to the original level after the specified timeout (default 1min).
func CallSetLogLevel(ctx context.Context, conn runtime.Caller, params *SetLogLevelParams) (SetLogLevelResponse, error) {
	resp, err := conn.CallMethod(ctx, "kong.debug.v1.set_log_level", params)
	if err != nil {
		return nil, err
	}
	return runtime.NarrowResponse[SetLogLevelResponse](resp)
}

// HandlerInterface should be implemented by the service implementation.
type HandlerInterface[U any] interface {
	GetLogLevel(ctx context.Context, userData U) (GetLogLevelResponse, error)
	SetLogLevel(ctx context.Context, userData U, param *SetLogLevelParams) (SetLogLevelResponse, error)
}

// GetLogLevelResponse is the interface returned by the method "get_log_level".
type GetLogLevelResponse interface {
	runtime.Response
	isGetLogLevelResponse()
}

// getGetLogLevelResponse returns an empty response of the type corresponding to the given code.
// Used by runtime code.
func getGetLogLevelResponse(code int) (runtime.Response, error) {
	switch code {
	case 0:
		return new(GetLogLevelResult), nil
	default:
		return nil, fmt.Errorf("invalid error code %d", code)
	}
}

// FoldGetLogLevelResultError returns a successful result or error
func FoldGetLogLevelResultError(resp GetLogLevelResponse, err error) (*GetLogLevelResult, error) {
	if err != nil {
		return nil, err
	}
	result, ok := resp.(*GetLogLevelResult)
	if !ok {
		return nil, resp.Error()
	}
	return result, nil
}

// GetLogLevelResult is the successful result value of method get_log_level.
// Current log level.
type GetLogLevelResult int64

func (GetLogLevelResult) isGetLogLevelResponse() {}

func (GetLogLevelResult) Error() error {
	return nil
}

func (r GetLogLevelResult) Send(ctx context.Context, w *runtime.Conn, id int) error {
	return w.SendResult(ctx, id, r)
}

// SetLogLevelParams is the type for the parameters of the method "set_log_level".
type SetLogLevelParams struct {
	LogLevel int64 `json:"log_level"`
	Timeout  int64 `json:"timeout,omitempty"`
}

// FillDefaults returns a new parameters object with any default values.
func (*SetLogLevelParams) FillDefaults() runtime.Params {
	return &SetLogLevelParams{Timeout: 60}
}

// AsRefArray returns an array of interface references to each field.
func (p *SetLogLevelParams) AsRefArray() ([]any, error) {
	return []any{
		&p.LogLevel,
		&p.Timeout,
	}, nil
}

// SetLogLevelResponse is the interface returned by the method "set_log_level".
type SetLogLevelResponse interface {
	runtime.Response
	isSetLogLevelResponse()
}

// getSetLogLevelResponse returns an empty response of the type corresponding to the given code.
// Used by runtime code.
func getSetLogLevelResponse(code int) (runtime.Response, error) {
	switch code {
	case 0:
		return new(SetLogLevelResult), nil
	default:
		return nil, fmt.Errorf("invalid error code %d", code)
	}
}

// FoldSetLogLevelResultError returns a successful result or error
func FoldSetLogLevelResultError(resp SetLogLevelResponse, err error) (*SetLogLevelResult, error) {
	if err != nil {
		return nil, err
	}
	result, ok := resp.(*SetLogLevelResult)
	if !ok {
		return nil, resp.Error()
	}
	return result, nil
}

// SetLogLevelResult is the successful result value of method set_log_level.
// dummy return value
type SetLogLevelResult bool

func (SetLogLevelResult) isSetLogLevelResponse() {}

func (SetLogLevelResult) Error() error {
	return nil
}

func (r SetLogLevelResult) Send(ctx context.Context, w *runtime.Conn, id int) error {
	return w.SendResult(ctx, id, r)
}
