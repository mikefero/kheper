// Code generated by magic pixies DO NOT EDIT.

// Generated from OpenRPC service 'Capabilities Negotiation'
// A service to announce which capabilities a node supports.
package kong_meta

import (
	"context"
	"fmt"
	runtime "github.com/Kong/go-openrpc/runtime"
)

type Wrapper[U any] struct {
	Handler HandlerInterface[U]
}

// GetID returns the service identification string.
func (Wrapper[U]) GetID() string {
	return "kong.meta.v1"
}

// SetUserData sets the value passed to the handler methods.
func (Wrapper[U]) SetUserData(conn *runtime.Conn, userData U) {
	conn.SetUserData(userData)
}

// GetMethods returns a dictionary with all the methods of the service,
// with a wrapper to handle (de)coding.
func (wh *Wrapper[U]) GetMethods() map[string]runtime.Method {
	return map[string]runtime.Method{"kong.meta.v1.capability_advertisement": runtime.WrapMethod(wh.Handler.CapabilityAdvertisement, getCapabilityAdvertisementResponse)}
}

// Performs remote call to method 'capability_advertisement'.
// Initial capabilities negotiation (from PoC PR)
func CallCapabilityAdvertisement(ctx context.Context, conn runtime.Caller, params *CapabilityAdvertisementParams) (CapabilityAdvertisementResponse, error) {
	resp, err := conn.CallMethod(ctx, "kong.meta.v1.capability_advertisement", params)
	if err != nil {
		return nil, err
	}
	return runtime.NarrowResponse[CapabilityAdvertisementResponse](resp)
}

// HandlerInterface should be implemented by the service implementation.
type HandlerInterface[U any] interface {
	CapabilityAdvertisement(ctx context.Context, userData U, param *CapabilityAdvertisementParams) (CapabilityAdvertisementResponse, error)
}

// CapabilityAdvertisementParams is the type for the parameters of the method "capability_advertisement".
type CapabilityAdvertisementParams struct {
	Capabilities Capabilities `json:"capabilities"`
	NodeId       string       `json:"node_id"`
}

// FillDefaults returns a new parameters object with any default values.
func (*CapabilityAdvertisementParams) FillDefaults() runtime.Params {
	return &CapabilityAdvertisementParams{}
}

// AsRefArray returns an array of interface references to each field.
func (p *CapabilityAdvertisementParams) AsRefArray() ([]any, error) {
	return []any{
		&p.NodeId,
		&p.Capabilities,
	}, nil
}

// CapabilityAdvertisementResponse is the interface returned by the method "capability_advertisement".
type CapabilityAdvertisementResponse interface {
	runtime.Response
	isCapabilityAdvertisementResponse()
}

// getCapabilityAdvertisementResponse returns an empty response of the type corresponding to the given code.
// Used by runtime code.
func getCapabilityAdvertisementResponse(code int) (runtime.Response, error) {
	switch code {
	case 0:
		return new(CapabilityAdvertisementResult), nil
	case 471:
		return new(CapabilityAdvertisementWrongNodeIdError), nil
	default:
		return nil, fmt.Errorf("invalid error code %d", code)
	}
}

// FoldCapabilityAdvertisementResultError returns a successful result or error
func FoldCapabilityAdvertisementResultError(resp CapabilityAdvertisementResponse, err error) (*CapabilityAdvertisementResult, error) {
	if err != nil {
		return nil, err
	}
	result, ok := resp.(*CapabilityAdvertisementResult)
	if !ok {
		return nil, resp.Error()
	}
	return result, nil
}

// CapabilityAdvertisementResult is the successful result value of method capability_advertisement.
// Capabilities encoded as an array of unique strings.
type CapabilityAdvertisementResult Capabilities

func (CapabilityAdvertisementResult) isCapabilityAdvertisementResponse() {}

func (CapabilityAdvertisementResult) Error() error {
	return nil
}

func (r CapabilityAdvertisementResult) Send(ctx context.Context, w *runtime.Conn, id int) error {
	return w.SendResult(ctx, id, r)
}

// Error code 471: wrong node_id
type CapabilityAdvertisementWrongNodeIdError struct{}

func (CapabilityAdvertisementWrongNodeIdError) isCapabilityAdvertisementResponse() {}

func (r CapabilityAdvertisementWrongNodeIdError) Error() error {
	return runtime.ErrorData{
		Code:    471,
		Data:    r,
		Message: "wrong node_id",
	}
}

func (r CapabilityAdvertisementWrongNodeIdError) Send(ctx context.Context, w *runtime.Conn, id int) error {
	return w.SendError(ctx, id, r.Error())
}

// Extra type definitions.

// Capabilities is defined in '#/components/schemas/capabilities'.
// Capabilities encoded as an array of unique strings.
type Capabilities []string
